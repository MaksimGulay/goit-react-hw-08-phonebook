{"version":3,"file":"static/js/468.a71f43fb.chunk.js","mappings":"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","sources":["components/app-style.js","redux/contacts/selector.js","components/contact_form/contactForm-style.js","components/contact_form/ContactForm.jsx","components/contact_list/contactList-style.js","components/contact_list/ContactList.jsx","components/filter/filter-style.js","components/filter/Filter.jsx","pages/Contacts.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Heading1 = styled.h1`\n  display: flex;\n  justify-content: center;\n  font-size: 28px;\n  color: #333;\n  margin-bottom: 10px;\n`;\n\nexport const Heading2 = styled.h2`\n  display: flex;\n  justify-content: center;\n  font-size: 20px;\n  color: #333;\n  margin-bottom: 10px;\n`;\n","// selector.js\nexport const getFilteredContacts = state => {\n  const { contacts, filter } = state;\n  const filterText = filter.filter.toLowerCase().trim();\n\n  if (!filterText) {\n    return contacts.contacts; // Повертає всі контакти, якщо фільтр порожній.\n  }\n\n  return contacts.contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filterText)\n  );\n};\n","import styled from 'styled-components';\nimport { Form, Field, ErrorMessage } from 'formik';\n\nexport const FormikForm = styled(Form)`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const FormContainer = styled.div`\n  width: 400px;\n  margin: 0 auto;\n  padding: 20px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n`;\n\nexport const Label = styled.label`\n  font-size: 16px;\n  margin-bottom: 5px;\n`;\n\nexport const Input = styled(Field)`\n  width: 376px;\n  padding: 10px;\n  font-size: 14px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  margin-bottom: 15px;\n`;\n\nexport const SubmitButton = styled.button`\n  background-color: #007bff;\n  color: #fff;\n  padding: 10px 15px;\n  border: none;\n  border-radius: 5px;\n  font-size: 16px;\n  cursor: pointer;\n`;\n\nexport const ErrorText = styled.p`\n  color: red;\n  font-size: 0.8rem;\n  margin-top: 4px;\n`;\n\nexport const StyledErrorMessage = styled(ErrorMessage)`\n  color: red;\n  font-size: 0.8rem;\n  margin-top: 4px;\n`;\n","// ContactForm.jsx\nimport React from 'react';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { nanoid } from 'nanoid';\nimport { useDispatch } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { useSelector } from 'react-redux';\nimport { getFilteredContacts } from 'redux/contacts/selector';\n\nimport {\n  FormikForm,\n  FormContainer,\n  Label,\n  Input,\n  SubmitButton,\n  ErrorText,\n  StyledErrorMessage,\n} from './contactForm-style';\n\nconst schema = Yup.object().shape({\n  name: Yup.string()\n    .min(2, 'Too Short!')\n    .max(50, 'Too Long!')\n    .required('Required'),\n  number: Yup.string()\n    .matches(/^\\d{3}-\\d{2}-\\d{2}$/, 'Invalid phone number format')\n    .required('Required'),\n});\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const filteredContacts = useSelector(getFilteredContacts);\n\n  const handleSubmit = (values, actions) => {\n    const { name } = values;\n\n    const existingContact = filteredContacts.find(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n\n    if (existingContact) {\n      alert(`${name} is already in contacts.`);\n      return;\n    }\n\n    const newContact = { ...values, id: nanoid() };\n    dispatch(addContact(newContact));\n    actions.resetForm();\n    actions.setSubmitting(false);\n  };\n\n  return (\n    <Formik\n      initialValues={{\n        name: '',\n        number: '',\n      }}\n      validationSchema={schema}\n      onSubmit={handleSubmit}\n    >\n      {() => (\n        <FormContainer>\n          <FormikForm>\n            <Label>Name</Label>\n            <Input id=\"name\" type=\"text\" name=\"name\" placeholder=\"Остап\" />\n            <ErrorText>\n              <StyledErrorMessage name=\"name\" />\n            </ErrorText>\n            <Label>Number</Label>\n            <Input\n              id=\"number\"\n              type=\"text\"\n              name=\"number\"\n              placeholder=\"123-45-67\"\n            />\n            <ErrorText>\n              <StyledErrorMessage name=\"number\" />\n            </ErrorText>\n            <SubmitButton type=\"submit\">Add contact</SubmitButton>\n          </FormikForm>\n        </FormContainer>\n      )}\n    </Formik>\n  );\n};\n","import styled from 'styled-components';\n\nexport const ListContainer = styled.div`\n  display: flex;\n  width: 400px;\n  margin: 0 auto;\n  padding: 0px 20px 0px 20px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n`;\n\nexport const StyledContactList = styled.ul`\n  list-style: none;\n  padding: 0px;\n  margin: 0px;\n`;\n\nexport const ListItem = styled.li`\n  text-align: center;\n  width: 400px;\n  padding: 10px;\n`;\nexport const ContactInfo = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 5px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n`;\n\nexport const ContactName = styled.span`\n  font-weight: bold;\n`;\n\nexport const DeleteButton = styled.button`\n  background-color: #ff6347;\n  color: white;\n  border: none;\n  border-radius: 5px;\n  padding: 5px 15px;\n  cursor: pointer;\n`;\n","// ContactList.jsx\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useSelector } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { getFilteredContacts } from 'redux/contacts/selector';\nimport {\n  ListContainer,\n  StyledContactList,\n  ListItem,\n  ContactInfo,\n  ContactName,\n  DeleteButton,\n} from './contactList-style';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n\n  const filteredContacts = useSelector(getFilteredContacts);\n\n  const handleDelete = id => {\n    dispatch(deleteContact(id));\n  };\n  return (\n    <ListContainer>\n      <StyledContactList>\n        {filteredContacts.map(contact => (\n          <ListItem key={contact.id}>\n            <ContactInfo>\n              <ContactName>{contact.name}:</ContactName> {contact.number}\n              <DeleteButton onClick={() => handleDelete(contact.id)}>\n                Delete\n              </DeleteButton>\n            </ContactInfo>\n          </ListItem>\n        ))}\n      </StyledContactList>\n    </ListContainer>\n  );\n};\n","import styled from 'styled-components';\n\nexport const FilterContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  max-width: 400px;\n  margin: 0 auto;\n  margin-bottom: 20px;\n  padding: 20px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n`;\n\nexport const Label = styled.label`\n  font-size: 16px;\n  margin-bottom: 5px;\n  display: block;\n`;\n\nexport const Input = styled.input`\n  width: 376px;\n  padding: 10px;\n  font-size: 14px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n`;\n","// Filter.jsx\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/contacts/filterSlice';\nimport { FilterContainer, Label, Input } from './filter-style';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(state => state.filter.filter);\n  const handleFilterChange = event => {\n    dispatch(setFilter(event.target.value));\n  };\n  return (\n    <FilterContainer>\n      <Label>Find contact by name</Label>\n      <Input\n        type=\"text\"\n        name=\"Find contact by name\"\n        value={filter}\n        onChange={handleFilterChange}\n      />\n    </FilterContainer>\n  );\n};\n","// Contacts.js\nimport { Heading1, Heading2 } from 'components/app-style';\nimport { ContactForm } from 'components/contact_form/ContactForm';\nimport { ContactList } from 'components/contact_list/ContactList';\nimport { Filter } from 'components/filter/Filter';\nimport { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getIsLoading } from 'redux/contacts/contactsSlice';\nimport { fetchContacts } from 'redux/contacts/operations';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n  return (\n    <div>\n      <Heading1>Phonebook</Heading1>\n      <ContactForm />\n      <Heading2>Contacts</Heading2>\n      {isLoading ? <b>Request in progress...</b> : null}\n      <Filter />\n      <ContactList />\n    </div>\n  );\n}\n"],"names":["Heading1","styled","_templateObject","_taggedTemplateLiteral","Heading2","_templateObject2","getFilteredContacts","state","contacts","filterText","filter","toLowerCase","trim","contact","name","includes","FormikForm","Form","FormContainer","Label","_templateObject3","Input","Field","_templateObject4","SubmitButton","_templateObject5","ErrorText","_templateObject6","StyledErrorMessage","ErrorMessage","_templateObject7","schema","Yup","shape","min","max","required","number","matches","ContactForm","dispatch","useDispatch","filteredContacts","useSelector","_jsx","Formik","initialValues","validationSchema","onSubmit","values","actions","find","alert","concat","newContact","_objectSpread","id","nanoid","addContact","resetForm","setSubmitting","children","_jsxs","type","placeholder","ListContainer","StyledContactList","ListItem","ContactInfo","ContactName","DeleteButton","ContactList","map","onClick","deleteContact","FilterContainer","Filter","value","onChange","event","setFilter","target","Contacts","isLoading","getIsLoading","useEffect","fetchContacts"],"sourceRoot":""}